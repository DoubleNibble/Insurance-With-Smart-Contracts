import React from 'react';


class InsurancePolicyCreator extends Component {
    constructor(props) {
	super(props);

	// This binding is necessary to make `this` work in the callback
    this.addBet = this.addBet.bind(this);
    this.calculateOdds = getOdds.bind(this);




	this.state = {
		premium:0, 
		cover:0, 
		flight:null, 
		proof:null
		}
}

	// Function to add a new insurance to the blockchain
    async addNewInsurance(premium, cover, flightProof) {
		console.log("adding new insurance");

		var totalCoverAmount = this.state.web3.toWei(cover, "ether")
		var premiumAmount = this.state.web3.toWei(premium, "ether")
		var proposer = this.currAccount

		//flightProof = "0x20001000ffff0300529b19692e6c0500bdd026692e6c05004000000004000000623a3fbd2c3f2dae01e3d07ff8744029d4cf77b49b548ed5ce46b66e1e8c96dc26254e04b7bb5712ab487c6df84ad79f9767e361f6f19d443528678d2134eec802aa0000474554202f70726f78792e70793f75726c3d68747470732533412f2f666c6967687473746174732e676c697463682e6d652f666c65782f666c696768747374617475732f726573742f76322f6a736f6e2f666c696768742f7374617475732f39353930323234373220485454502f312e310d0a486f73743a20746c7370726f6f662e6261737469656e2e746563680d0a436f6e6e656374696f6e3a206b6565702d616c6976650d0a0d0ad128099128119851a9911d74850e28a802e60001485454502f312e3120323030204f4b0d0a446174653a204d6f6e2c203134204d617920323031382031383a31313a313120474d540d0a5365727665723a204170616368652f322e342e313820285562756e7475290d0a436f6e6e656374696f6e3a20636c6f73650d0a782d706f77657265642d62793a20457870726573730d0a6163636573732d636f6e74726f6c2d616c6c6f772d6f726967696e3a202a0d0a436f6e74656e742d4c656e6774683a20333139380d0a436f6e74656e742d547970653a206170706c69636174696f6e2f6a736f6e3b636861727365743d5554462d380d0a0d0aaaf8d322f2cd5af521b2f2ebfdffec13027e0c017b2272657175657374223a7b22666c696768744964223a7b22726571756573746564223a22393539303232343732222c22696e746572707265746564223a3935393032323437327d2c22657874656e6465644f7074696f6e73223a7b7d2c2275726c223a2268747470733a2f2f6170692e666c6967687473746174732e636f6d2f666c65782f666c696768747374617475732f726573742f76322f6a736f6e2f666c696768742f7374617475732f393539303232343732227d2c22617070656e646978223a7b226169726c696e6573223a5b7b226673223a223455222c2269617461223a223455222c226963616f223a22475749222c226e616d65223a224765726d616e77696e6773222c2270686f6e654e756d626572223a222b3434202830292038373020323532203132203530222c22616374697665223a747275657d2c7b226673223a225541222c2269617461223a225541222c226963616f223a2255414c222c226e616d65223a22556e69746564204169726c696e6573222c2270686f6e654e756d626572223a22312d3830302d3836342d38333331222c22616374697665223a747275657d2c7b226673223a224557222c2269617461223a224557222c226963616f223a22455747222c226e616d65223a224575726f77696e6773222c22616374697665223a747275657d5d2c22616972706f727473223a5b7b226673223a2243474e222c2269617461223a2243474e222c226963616f223a224544444b222c226e616d65223a22436f6c6f676e6520426f6e6e20416972706f7274222c2263697479223a22436f6c6f676e65222c2263697479436f6465223a2243474e222c22636f756e747279436f6465223a224445222c22636f756e7472794e616d65223a224765726d616e79222c22726567696f6e4e616d65223a224575726f7065222c2274696d655a6f6e65526567696f6e4e616d65223a224575726f70652f4265726c696e222c226c6f63616c54696d65223a22323031382d30352d31345432303a31313a31312e393139222c227574634f6666736574486f757273223a322e302c226c61746974756465223a35302e3837383336332c226c6f6e676974756465223a372e3132323232342c22656c65766174696f6e46656574223a3235302c22636c617373696669636174696f6e223a322c22616374697665223a747275652c2264656c6179496e64657855726c223a2268747470733a2f2f6170692e666c6967687473746174732e636f6d2f666c65782f64656c6179696e6465782f726573742f76312f6a736f6e2f616972706f7274732f43474e3f636f6465547970653d6673222c227765617468657255726c223a2268747470733a2f2f6170692e666c6967687473746174732e636f6d2f666c65782f776561746865722f726573742f76312f6a736f6e2f616c6c2f43474e3f636f6465547970653d6673227d2c7b226673223a224c4852222c2269617461223a224c4852222c226963616f223a2245474c4c222c226e616d65223a224c6f6e646f6e204865617468726f7720416972706f7274222c2263697479223a224c6f6e646f6e222c2263697479436f6465223a224c4f4e222c227374617465436f6465223a22454e222c22636f756e747279436f6465223a224742222c22636f756e7472794e616d65223a22556e69746564204b696e67646f6d222c22726567696f6e4e616d65223a224575726f7065222c2274696d655a6f6e65526567696f6e4e616d65223a224575726f70652f4c6f6e646f6e222c226c6f63616c54696d65223a22323031382d30352d31345431393a31313a31312e393139222c227574634f6666736574486f757273223a312e302c226c61746974756465223a35312e3436393630332c226c6f6e676974756465223a2d302e3435333536362c22656c65766174696f6e46656574223a38302c22636c617373696669636174696f6e223a312c22616374697665223a747275652c2264656c6179496e64657855726c223a2268747470733a2f2f6170692e666c6967687473746174732e636f6d2f666c65782f64656c6179696e6465782f726573742f76312f6a736f6e2f616972706f7274732f4c48523f636f6465547970653d6673222c227765617468657255726c223a2268747470733a2f2f6170692e666c6967687473746174732e636f6d2f666c65782f776561746865722f726573742f76312f6a736f6e2f616c6c2f4c48523f636f6465547970653d6673227d5d2c2265717569706d656e7473223a5b7b2269617461223a22333230222c226e616d65223a224169726275732041333230222c22747572626f50726f70223a66616c73652c226a6574223a747275652c2277696465626f6479223a66616c73652c22726567696f6e616c223a66616c73657d5d7d2c22666c69676874537461747573223a7b22666c696768744964223a3935393032323437322c22636172726965724673436f6465223a223455222c22666c696768744e756d626572223a22343639222c22646570617274757265416972706f72744673436f6465223a224c4852222c226172726976616c416972706f72744673436f6465223a2243474e222c2264657061727475726544617465223a7b22646174654c6f63616c223a22323031382d30352d31335432303a30303a30302e303030222c2264617465557463223a22323031382d30352d31335431393a30303a30302e3030305a227d2c226172726976616c44617465223a7b22646174654c6f63616c223a22323031382d30352d31335432323a32353a30302e303030222c2264617465557463223a22323031382d30352d31335432303a32353a30302e3030305a227d2c22737461747573223a2243222c227363686564756c65223a7b22666c6967687454797065223a224a222c2273657276696365436c6173736573223a2252464a59222c227265737472696374696f6e73223a22227d2c226f7065726174696f6e616c54696d6573223a7b227075626c6973686564446570617274757265223a7b22646174654c6f63616c223a22323031382d30352d31335432303a30303a30302e303030222c2264617465557463223a22323031382d30352d31335431393a30303a30302e3030305a227d2c227075626c69736865644172726976616c223a7b22646174654c6f63616c223a22323031382d30352d31335432323a32353a30302e303030222c2264617465557463223a22323031382d30352d31335432303a32353a30302e3030305a227d2c227363686564756c656447617465446570617274757265223a7b22646174654c6f63616c223a22323031382d30352d31335432303a30303a30302e303030222c2264617465557463223a22323031382d30352d31335431393a30303a30302e3030305a227d2c22657374696d6174656447617465446570617274757265223a7b22646174654c6f63616c223a22323031382d30352d31335432303a33353a30302e303030222c2264617465557463223a22323031382d30352d31335431393a33353a30302e3030305a227d2c227363686564756c6564476174654172726976616c223a7b22646174654c6f63616c223a22323031382d30352d31335432323a32353a30302e303030222c2264617465557463223a22323031382d30352d31335432303a32353a30302e3030305a227d2c22657374696d61746564476174654172726976616c223a7b22646174654c6f63616c223a22323031382d30352d31335432323a35343a30302e303030222c2264617465557463223a22323031382d30352d31335432303a35343a30302e3030305a227d7d2c22636f6465736861726573223a5b7b226673436f6465223a225541222c22666c696768744e756d626572223a2239363731222c2272656c6174696f6e73686970223a224c227d2c7b226673436f6465223a224557222c22666c696768744e756d626572223a22343639222c2272656c6174696f6e73686970223a2253227d5d2c2264656c617973223a7b226465706172747572654761746544656c61794d696e75746573223a33352c226172726976616c4761746544656c61794d696e75746573223a32397d2c22666c696768744475726174696f6e73223a7b227363686564756c6564426c6f636b4d696e75746573223a38357d2c22616972706f72745265736f7572636573223a7b226465706172747572655465726d696e616c223a2232222c226172726976616c5465726d696e616c223a2231222c226172726976616c47617465223a22423430227d2c22666c6967687445717569706d656e74223a7b227363686564756c656445717569706d656e7449617461436f6465223a22333230222c2261637475616c45717569706d656e7449617461436f6465223a22333230227d7d7d002943beee6c730a1c318a943bb98ede"
		
		var proof = (await flightProof).proof
		console.log(proof, totalCoverAmount, premiumAmount)
		
		await this.insuranceContractInst.proposeInsuranceCover(
			proof, 
			totalCoverAmount, 
			{from: this.currAccount, value: premiumAmount}
			);
		
		console.log("done")
    }



    // Try to parse a number and if succesful, set it as the cover amount
    setCover(cover) {
	var notNum = isNaN(cover)
	if (!notNum) {
	    this.setState({cover:cover})
	}
    }
    // Try to parse a number out and if succesful, set it as the premium amount
    setPremium(premium) {
	var notNum = isNaN(premium)
	if (!notNum) {
	    this.setState({premium:premium})
	}
    }
    setFlight(flight) {
	console.log(flight)
	this.setState({flight:flight})
    }
    render() {
	var proof =  flights.getFlight(959212228)
	return (
		<div>
		<div style={{display:"inline-block"}}>
		<flights.FlightSelector selectFlight={this.setFlight.bind(this)}/>

		<p>I want to be covered to the sum of:</p>
		<input style={{width:"120px", margin:"0px 20px 0px 0px"}} onChange={(e) => {this.setCover(e.target.value)} }></input>

		<p style={{display:"inline-block"}}>{this.state.cover}</p>
		<p>I will pay a premium of:</p>
		<input style={{width:"120px", margin:"0px 20px 0px 0px"}} onChange={(e) => {this.setPremium(e.target.value)} }></input>

		<p style={{display:"inline-block"}}>{this.state.premium}</p>
		{this.state.flight ? <button style={{display:"block"}} onClick={() => this.props.addInsurance(this.state.premium, this.state.cover, this.state.flight)}>Add Insurance Policy On Flight Number {this.state.flight.flightNumber}</button> : null
		
		</div>
	    </div>
	)
    }
}